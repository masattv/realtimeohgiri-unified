'use client'

import { useEffect, useState } from 'react';
import Link from 'next/link';
import { Topic, Answer } from '@/lib/types';
import { subscribeToAnswers } from '@/lib/supabase';

interface TopicClientProps {
  initialTopic: Topic;
  initialAnswers: Answer[];
}

export default function TopicClient({ initialTopic, initialAnswers }: TopicClientProps) {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const [topic, _] = useState<Topic>(initialTopic);
  const [answers, setAnswers] = useState<Answer[]>(initialAnswers);
  const [isSubmitting, setIsSubmitting] = useState(false);

  // 回答を得点順にソート
  const sortedAnswers = [...answers].sort((a, b) => {
    // まず選択されている回答を優先
    if (a.isSelected && !b.isSelected) return -1;
    if (!a.isSelected && b.isSelected) return 1;
    // 次に得点で降順ソート
    return b.score - a.score;
  });

  useEffect(() => {
    // リアルタイム購読を設定
    const subscription = subscribeToAnswers(topic.id, (payload) => {
      console.log('リアルタイム更新:', payload);
      // 変更に応じてデータを更新
      fetchLatestAnswers(topic.id);
    });

    return () => {
      // クリーンアップ
      subscription.unsubscribe();
    };
  }, [topic.id]);

  // 最新の回答を取得する関数
  const fetchLatestAnswers = async (topicId: string) => {
    try {
      const response = await fetch(`/api/answers?topicId=${topicId}`);
      const data = await response.json();
      if (data.success) {
        setAnswers(data.data);
      }
    } catch (error) {
      console.error('回答の取得に失敗しました:', error);
    }
  };

  // 回答を送信する関数
  const handleSubmitAnswer = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    const formData = new FormData(event.currentTarget);
    const content = formData.get('content') as string;
    
    if (!content.trim() || isSubmitting) return;
    
    setIsSubmitting(true);
    
    try {
      const response = await fetch('/api/answers', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          content,
          topicId: topic.id,
        }),
      });
      
      const data = await response.json();
      if (data.success) {
        // フォームをリセット
        event.currentTarget.reset();
        // 最新の回答を再取得
        fetchLatestAnswers(topic.id);
      }
    } catch (error) {
      console.error('回答の送信に失敗しました:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  // 得点に応じたスタイルを返す関数
  const getScoreStyle = (score: number) => {
    if (score >= 8) return 'bg-gradient-to-r from-yellow-400 to-yellow-600 text-white';
    if (score >= 6) return 'bg-gradient-to-r from-green-400 to-green-600 text-white';
    if (score >= 4) return 'bg-gradient-to-r from-blue-400 to-blue-600 text-white';
    return 'bg-gradient-to-r from-gray-400 to-gray-600 text-white';
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-indigo-50 to-white dark:from-gray-900 dark:to-gray-800">
      <div className="container mx-auto px-4 py-12">
        {/* ヘッダー */}
        <div className="max-w-4xl mx-auto mb-12">
          <Link
            href="/"
            className="inline-flex items-center text-blue-600 dark:text-blue-400 hover:underline mb-8 group transition-all"
          >
            <span className="mr-2 transform group-hover:-translate-x-1 transition-transform">←</span> ホームに戻る
          </Link>
          
          <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-8 mb-8">
            <div className="flex justify-between items-start mb-4">
              <div className="flex gap-2">
                <span className={`inline-block text-xs px-3 py-1 rounded-full ${
                  topic.isActive
                    ? "bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-100"
                    : "bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300"
                }`}>
                  {topic.isActive ? "アクティブ" : "終了"}
                </span>
                {topic.isAutoGenerated && (
                  <span className="inline-block bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-100 text-xs px-3 py-1 rounded-full">
                    AI生成
                  </span>
                )}
              </div>
              <span className="text-sm text-gray-500 dark:text-gray-400">
                {new Date(topic.createdAt).toLocaleDateString('ja-JP')}
              </span>
            </div>
            
            <h1 className="text-3xl font-bold mb-4">{topic.content}</h1>
            <p className="text-gray-600 dark:text-gray-300">
              このお題に対する面白い回答を投稿してください。AIがあなたの回答を評価します！
            </p>
          </div>
          
          {/* 回答フォーム */}
          {topic.isActive && (
            <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-8 mb-12">
              <h2 className="text-2xl font-bold mb-6">あなたの回答を投稿</h2>
              <form
                className="space-y-6"
                onSubmit={handleSubmitAnswer}
              >
                <input type="hidden" name="topicId" value={topic.id} />
                <div>
                  <label htmlFor="content" className="block mb-2 text-sm font-medium">
                    あなたの回答
                  </label>
                  <textarea
                    id="content"
                    name="content"
                    rows={3}
                    className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700"
                    placeholder="面白い回答を入力してください..."
                    required
                    disabled={isSubmitting}
                  ></textarea>
                </div>
                <div>
                  <button
                    type="submit"
                    disabled={isSubmitting}
                    className="w-full px-4 py-3 bg-gradient-to-r from-blue-600 to-indigo-500 text-white rounded-xl hover:from-blue-700 hover:to-indigo-600 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 transition-all shadow-md hover:shadow-lg"
                  >
                    {isSubmitting ? '送信中...' : '回答を送信する'}
                  </button>
                </div>
              </form>
            </div>
          )}
          
          {/* 回答一覧 */}
          <div className="space-y-6">
            <h2 className="text-2xl font-bold">回答一覧</h2>
            {sortedAnswers.length === 0 ? (
              <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-8 text-center">
                <p className="text-gray-500 dark:text-gray-400 text-lg">
                  まだ回答がありません。最初の回答者になりましょう！
                </p>
              </div>
            ) : (
              <div className="space-y-6">
                {sortedAnswers.map((answer) => (
                  <div
                    key={answer.id}
                    className={`rounded-2xl shadow-lg overflow-hidden ${
                      answer.isSelected
                        ? "border-2 border-yellow-400 dark:border-yellow-500"
                        : ""
                    }`}
                  >
                    <div className="bg-white dark:bg-gray-800 p-6">
                      <div className="flex justify-between items-start mb-4">
                        <div className="flex gap-2">
                          {answer.isSelected && (
                            <span className="inline-block bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-100 text-xs px-3 py-1 rounded-full">
                              ベスト回答
                            </span>
                          )}
                        </div>
                        <div className="flex items-center gap-2">
                          <div className={`text-sm font-bold ${getScoreStyle(answer.score)} rounded-full w-8 h-8 flex items-center justify-center`}>
                            {answer.score}
                          </div>
                          <span className="text-sm text-gray-500 dark:text-gray-400">
                            点
                          </span>
                        </div>
                      </div>
                      
                      <p className="text-lg font-medium mb-3">{answer.content}</p>
                      
                      <div className="text-sm text-gray-500 dark:text-gray-400 mb-4">
                        {new Date(answer.createdAt).toLocaleString('ja-JP')}
                      </div>
                      
                      {answer.reviewComment && (
                        <div className="mt-4 pt-4 border-t border-gray-100 dark:border-gray-700">
                          <div className="flex items-start">
                            <div className="flex-shrink-0 bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-200 rounded-full p-2 mr-3">
                              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                <path d="M5.255 5.786a.237.237 0 0 0 .241.247h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286zm1.557 5.763c0 .533.425.927 1.01.927.609 0 1.028-.394 1.028-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94z"/>
                              </svg>
                            </div>
                            <div>
                              <h4 className="text-sm font-medium text-blue-600 dark:text-blue-400 mb-1">AIからのフィードバック</h4>
                              <p className="text-sm text-gray-600 dark:text-gray-300">{answer.reviewComment}</p>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
} 